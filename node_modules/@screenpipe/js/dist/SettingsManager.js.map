{"version":3,"sources":["../../common/utils.ts","../src/SettingsManager.ts"],"names":["flattenObject","obj","prefix","acc","k","pre","unflattenObject","result","key","keys","current","i","getDefaultSettings","DEFAULT_SETTINGS","SettingsManager","platform","home","os","baseDir","path","xdgData","profilesPath","activeProfile","profilesData","fs","profiles","data","rawSettings","error","flattenedSettings","value","newSettings","namespace","settings"],"mappings":"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","file":"SettingsManager.js","sourcesContent":["import type { Settings } from \"./types\";\n\n// Helper functions to flatten/unflatten objects\nconst flattenObject = (obj: any, prefix = \"\"): Record<string, any> => {\n  return Object.keys(obj).reduce((acc: Record<string, any>, k: string) => {\n    const pre = prefix.length ? prefix + \".\" : \"\";\n    if (\n      typeof obj[k] === \"object\" &&\n      obj[k] !== null &&\n      !Array.isArray(obj[k])\n    ) {\n      Object.assign(acc, flattenObject(obj[k], pre + k));\n    } else {\n      acc[pre + k] = obj[k];\n    }\n    return acc;\n  }, {});\n};\n\nconst unflattenObject = (obj: Record<string, any>): any => {\n  const result: any = {};\n  for (const key in obj) {\n    const keys = key.split(\".\");\n    let current = result;\n    for (let i = 0; i < keys.length; i++) {\n      const k = keys[i];\n      if (i === keys.length - 1) {\n        current[k] = obj[key];\n      } else {\n        current[k] = current[k] || {};\n        current = current[k];\n      }\n    }\n  }\n  return result;\n};\n// Helper functions that work in both environments\nfunction toCamelCase(str: string): string {\n  return str.replace(/([-_][a-z])/g, (group) =>\n    group.toUpperCase().replace(\"-\", \"\").replace(\"_\", \"\")\n  );\n}\n\nfunction toSnakeCase(str: string): string {\n  return str.replace(/[A-Z]/g, (letter) => `_${letter.toLowerCase()}`);\n}\n\n// function to convert any object all properties to snake case\nfunction convertObjectToSnakeCase(obj: any): any {\n  return Object.keys(obj).reduce((result, key) => {\n    const snakeKey = toSnakeCase(key);\n    result[snakeKey] = convertObjectToSnakeCase(obj[key]);\n    return result;\n  }, {} as any);\n}\n\nfunction convertObjectToCamelCase(obj: any): any {\n  if (Array.isArray(obj)) {\n    return obj.map(convertObjectToCamelCase);\n  } else if (obj !== null && typeof obj === \"object\") {\n    return Object.keys(obj).reduce((result, key) => {\n      const camelKey = toCamelCase(key);\n      result[camelKey] = convertObjectToCamelCase(obj[key]);\n      return result;\n    }, {} as any);\n  }\n  return obj;\n}\n\nfunction getDefaultSettings(): Settings {\n  return {\n    openaiApiKey: \"\",\n    deepgramApiKey: \"\",\n    aiModel: \"gpt-4o\",\n    aiUrl: \"https://api.openai.com/v1\",\n    customPrompt: `Rules:\n    - You can analyze/view/show/access videos to the user by putting .mp4 files in a code block (we'll render it) like this: \\`/users/video.mp4\\`, use the exact, absolute, file path from file_path property\n    - Do not try to embed video in links (e.g. [](.mp4) or https://.mp4) instead put the file_path in a code block using backticks\n    - Do not put video in multiline code block it will not render the video (e.g. \\`\\`\\`bash\\n.mp4\\`\\`\\` IS WRONG) instead using inline code block with single backtick\n    - Always answer my question/intent, do not make up things\n    `,\n    port: 3030,\n    dataDir: \"default\",\n    disableAudio: false,\n    ignoredWindows: [],\n    includedWindows: [],\n    aiProviderType: \"openai\",\n    embeddedLLM: {\n      enabled: false,\n      model: \"llama3.2:1b-instruct-q4_K_M\",\n      port: 11434,\n    },\n    enableFrameCache: true,\n    enableUiMonitoring: false,\n    aiMaxContextChars: 512000,\n    analyticsEnabled: true,\n    user: {\n      token: \"\",\n    },\n    customSettings: {},\n    monitorIds: [\"default\"],\n    audioDevices: [\"default\"],\n    audioTranscriptionEngine: \"whisper-large-v3-turbo\",\n    enableRealtimeAudioTranscription: false,\n    realtimeAudioTranscriptionEngine: \"deepgram\",\n    disableVision: false,\n    aiPresets: [],\n  };\n}\n\nexport {\n  flattenObject,\n  unflattenObject,\n  toCamelCase,\n  toSnakeCase,\n  convertObjectToSnakeCase,\n  convertObjectToCamelCase,\n  getDefaultSettings,\n};\n","import fs from \"fs/promises\";\nimport path from \"path\";\nimport os from \"os\";\nimport {\n  flattenObject,\n  getDefaultSettings,\n  unflattenObject,\n} from \"../../common/utils\";\nimport type { Settings } from \"../../common/types\";\n\nconst DEFAULT_SETTINGS = getDefaultSettings();\n\nexport class SettingsManager {\n  private settings: Settings;\n  private storePath: string;\n  private initialized: boolean = false;\n\n  constructor() {\n    this.settings = DEFAULT_SETTINGS;\n    this.storePath = \"\"; // will be set in init()\n  }\n\n  private async getStorePath(): Promise<string> {\n    const platform = process.platform;\n    const home = os.homedir();\n\n    // Get base screenpipe data directory path based on platform\n    let baseDir: string;\n    switch (platform) {\n      case \"darwin\":\n        baseDir = path.join(\n          home,\n          \"Library\",\n          \"Application Support\",\n          \"screenpipe\"\n        );\n        break;\n      case \"linux\":\n        const xdgData =\n          process.env.XDG_DATA_HOME || path.join(home, \".local\", \"share\");\n        baseDir = path.join(xdgData, \"screenpipe\");\n        break;\n      case \"win32\":\n        baseDir = path.join(\n          process.env.LOCALAPPDATA || path.join(home, \"AppData\", \"Local\"),\n          \"screenpipe\"\n        );\n        break;\n      default:\n        throw new Error(`unsupported platform: ${platform}`);\n    }\n\n    // First check profiles.bin to get active profile\n    const profilesPath = path.join(baseDir, \"profiles.bin\");\n    let activeProfile = \"default\";\n    try {\n      const profilesData = await fs.readFile(profilesPath);\n      const profiles = JSON.parse(profilesData.toString());\n      if (profiles.activeProfile) {\n        activeProfile = profiles.activeProfile;\n      }\n    } catch (error) {\n      // Profiles file doesn't exist yet, use default\n    }\n\n    // Return store path for active profile\n    return activeProfile === \"default\"\n      ? path.join(baseDir, \"store.bin\")\n      : path.join(baseDir, `store-${activeProfile}.bin`);\n  }\n\n  async init(): Promise<void> {\n    // if (this.initialized) return;\n\n    if (!fs || !path) throw new Error(\"failed to load required modules\");\n\n    this.storePath = await this.getStorePath();\n\n    try {\n      await fs.mkdir(path.dirname(this.storePath), { recursive: true });\n      const data = await fs.readFile(this.storePath);\n      const rawSettings = JSON.parse(data.toString());\n      this.settings = { ...DEFAULT_SETTINGS, ...unflattenObject(rawSettings) };\n      this.initialized = true;\n    } catch (error) {\n      if ((error as { code?: string }).code === \"ENOENT\") {\n        await this.save();\n        this.initialized = true;\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  async save(): Promise<void> {\n    await fs.mkdir(path.dirname(this.storePath), { recursive: true });\n    const flattenedSettings = flattenObject(this.settings);\n    await fs.writeFile(\n      this.storePath,\n      JSON.stringify(flattenedSettings, null, 2)\n    );\n  }\n\n  async get<K extends keyof Settings>(key: K): Promise<Settings[K]> {\n    if (!this.initialized) await this.init();\n    return this.settings[key];\n  }\n\n  async set<K extends keyof Settings>(\n    key: K,\n    value: Settings[K]\n  ): Promise<void> {\n    if (!this.initialized) await this.init();\n    this.settings[key] = value;\n    await this.save();\n  }\n\n  async getAll(): Promise<Settings> {\n    await this.init();\n    return { ...this.settings };\n  }\n\n  async update(newSettings: Partial<Settings>): Promise<void> {\n    if (!this.initialized) await this.init();\n    this.settings = { ...this.settings, ...newSettings };\n    await this.save();\n  }\n\n  async reset(): Promise<void> {\n    this.settings = { ...DEFAULT_SETTINGS };\n    await this.save();\n  }\n\n  async resetKey<K extends keyof Settings>(key: K): Promise<void> {\n    if (!this.initialized) await this.init();\n    this.settings[key] = DEFAULT_SETTINGS[key];\n    await this.save();\n  }\n\n  async getCustomSetting(namespace: string, key: string): Promise<any> {\n    if (!this.initialized) await this.init();\n    return this.settings.customSettings?.[namespace]?.[key];\n  }\n\n  async setCustomSetting(\n    namespace: string,\n    key: string,\n    value: any\n  ): Promise<void> {\n    if (!this.initialized) await this.init();\n    this.settings.customSettings = this.settings.customSettings || {};\n    this.settings.customSettings[namespace] =\n      this.settings.customSettings[namespace] || {};\n    this.settings.customSettings[namespace][key] = value;\n    await this.save();\n  }\n\n  async getNamespaceSettings(\n    namespace: string\n  ): Promise<Record<string, any> | undefined> {\n    if (!this.initialized) await this.init();\n    return this.settings.customSettings?.[namespace];\n  }\n\n  async updateNamespaceSettings(\n    namespace: string,\n    settings: Record<string, any>\n  ): Promise<void> {\n    if (!this.initialized) await this.init();\n    this.settings.customSettings = this.settings.customSettings || {};\n    this.settings.customSettings[namespace] = settings;\n    await this.save();\n  }\n}\n"]}