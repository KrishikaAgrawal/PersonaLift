{"version":3,"sources":["../src/InboxManager.ts"],"names":["getAvailablePort","resolve","reject","server","createServer","port","InboxManager","message","fork","action","actionId","error"],"mappings":"2EAIA,eAAeA,CAAAA,EAAoC,CACjD,OAAO,IAAI,OAAQ,CAAA,CAACC,EAASC,CAAW,GAAA,CACtC,IAAMC,CAAAA,CAASC,gBAAa,EAAA,CAC5BD,CAAO,CAAA,KAAA,GACPA,CAAO,CAAA,EAAA,CAAG,OAASD,CAAAA,CAAM,EACzBC,CAAO,CAAA,MAAA,CAAO,CAAG,CAAA,IAAM,CACrB,IAAME,CAAAA,CAAQF,CAAO,CAAA,OAAA,EAA0B,CAAA,IAAA,CAC/CA,CAAO,CAAA,KAAA,CAAM,IAAMF,CAAQI,CAAAA,CAAI,CAAC,EAClC,CAAC,EACH,CAAC,CACH,KAEaC,CAAN,CAAA,KAAmB,CAChB,gBAAA,CACA,oBAER,MAAM,IAAA,CAAKC,CAAyC,CAAA,CAC7C,KAAK,gBACR,GAAA,IAAA,CAAK,gBAAmB,CAAA,MAAMP,GAC9B,CAAA,IAAA,CAAK,mBAAsBQ,CAAAA,kBAAAA,CAAK,oBAAqB,CACnD,IAAA,CAAK,gBAAiB,CAAA,QAAA,EACxB,CAAC,CAGCD,CAAAA,CAAAA,CAAAA,CAAQ,UACVA,CAAQ,CAAA,OAAA,CAAUA,CAAQ,CAAA,OAAA,CAAQ,IAAKE,CAAW,EAAA,CAChD,IAAMC,CAAAA,CAAW,OAAO,UAAW,EAAA,CACnC,OAAO,CACL,KAAOD,CAAAA,CAAAA,CAAO,KACd,CAAA,MAAA,CAAQC,EACR,IAAM,CAAA,IAAA,CAAK,gBACX,CAAA,QAAA,CAAUD,EAAO,QACnB,CACF,CAAC,CAAA,CAAA,CAGH,GAAI,CAWF,OAAA,CAViB,MAAM,KAAA,CAAM,8BAAgC,CAAA,CAC3D,MAAQ,CAAA,MAAA,CACR,QAAS,CAAE,cAAA,CAAgB,kBAAmB,CAAA,CAC9C,KAAM,IAAK,CAAA,SAAA,CAAU,CACnB,GAAGF,EACH,IAAM,CAAA,OAAA,CACN,gBAAkB,CAAA,IAAA,CAAK,gBACzB,CAAC,CACH,CAAC,CAAA,EAEe,EAClB,CAASI,MAAAA,CAAAA,CAAO,CACd,OAAA,OAAA,CAAQ,MAAM,+BAAiCA,CAAAA,CAAK,CAC7C,CAAA,KACT,CACF,CACF","file":"InboxManager.cjs","sourcesContent":["import { ChildProcess, fork } from \"child_process\";\nimport type { InboxMessage } from \"../../common/types\";\nimport { type AddressInfo, createServer } from \"net\";\n\nasync function getAvailablePort(): Promise<number> {\n  return new Promise((resolve, reject) => {\n    const server = createServer();\n    server.unref();\n    server.on(\"error\", reject);\n    server.listen(0, () => {\n      const port = (server.address() as AddressInfo).port;\n      server.close(() => resolve(port));\n    });\n  });\n}\n\nexport class InboxManager {\n  private actionServerPort?: number;\n  private actionServerProcess?: ChildProcess;\n\n  async send(message: InboxMessage): Promise<boolean> {\n    if (!this.actionServerPort) {\n      this.actionServerPort = await getAvailablePort();\n      this.actionServerProcess = fork(\"./inbox-server.js\", [\n        this.actionServerPort.toString(),\n      ]);\n    }\n\n    if (message.actions) {\n      message.actions = message.actions.map((action) => {\n        const actionId = crypto.randomUUID();\n        return {\n          label: action.label,\n          action: actionId,\n          port: this.actionServerPort,\n          callback: action.callback,\n        };\n      });\n    }\n\n    try {\n      const response = await fetch(\"http://localhost:11435/inbox\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          ...message,\n          type: \"inbox\",\n          actionServerPort: this.actionServerPort,\n        }),\n      });\n\n      return response.ok;\n    } catch (error) {\n      console.error(\"failed to send inbox message:\", error);\n      return false;\n    }\n  }\n}\n"]}