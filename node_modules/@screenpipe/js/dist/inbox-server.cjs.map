{"version":3,"sources":["../src/inbox-server.ts"],"names":["actionCallbacks","startInboxServer","port","app","express","req","res","next","action","callback","error","resolve"],"mappings":"sJAGMA,IAAAA,CAAAA,CAAkB,IAAI,IAE5B,eAAsBC,CAAiBC,CAAAA,CAAAA,CAAwC,CAC7E,IAAMC,CAAAA,CAAMC,kBAAQ,EAAA,CACpB,OAAAD,CAAI,CAAA,GAAA,CAAIC,kBAAQ,CAAA,IAAA,EAAM,CAGtBD,CAAAA,CAAAA,CAAI,GAAI,CAAA,CAACE,EAAKC,CAAKC,CAAAA,CAAAA,GAAS,CAK1B,GAJAD,EAAI,MAAO,CAAA,6BAAA,CAA+B,GAAG,CAAA,CAC7CA,EAAI,MAAO,CAAA,8BAAA,CAAgC,oBAAoB,CAAA,CAC/DA,EAAI,MAAO,CAAA,8BAAA,CAAgC,cAAc,CAAA,CAErDD,EAAI,MAAW,GAAA,SAAA,CAAW,CAC5BC,CAAAA,CAAI,WAAW,GAAG,CAAA,CAClB,MACF,CACAC,IACF,CAAC,CAEDJ,CAAAA,CAAAA,CAAI,KAAK,SAAW,CAAA,CAACE,CAAKC,CAAAA,CAAAA,GAAQ,CAChC,GAAM,CAAE,MAAAE,CAAAA,CAAO,EAAIH,CAAI,CAAA,IAAA,CACjBI,CAAWT,CAAAA,CAAAA,CAAgB,IAAIQ,CAAM,CAAA,CACvCC,CACFA,CAAAA,CAAAA,EACG,CAAA,IAAA,CAAK,IAAM,CACVH,EAAI,IAAK,CAAA,CAAE,OAAS,CAAA,IAAK,CAAC,CAC1BN,CAAAA,CAAAA,CAAgB,MAAOQ,CAAAA,CAAM,EAC/B,CAAC,CAAA,CACA,KAAOE,CAAAA,CAAAA,EAAU,CAChB,OAAQ,CAAA,KAAA,CAAM,yBAA2BA,CAAAA,CAAK,EAC9CJ,CAAI,CAAA,MAAA,CAAO,GAAG,CAAA,CAAE,KAAK,CAAE,OAAA,CAAS,KAAO,CAAA,KAAA,CAAOI,EAAM,OAAQ,CAAC,EAC/D,CAAC,EAEHJ,CAAI,CAAA,MAAA,CAAO,GAAG,CAAA,CAAE,KAAK,CAAE,OAAA,CAAS,KAAO,CAAA,KAAA,CAAO,kBAAmB,CAAC,EAEtE,CAAC,CAAA,CAEM,IAAI,OAASK,CAAAA,CAAAA,EAAY,CAC9BR,CAAAA,CAAI,OAAOD,CAAM,CAAA,IAAM,CACrB,OAAA,CAAQ,IAAI,CAAmCA,gCAAAA,EAAAA,CAAI,CAAE,CAAA,CAAA,CACrDS,EAAQR,CAAG,EACb,CAAC,EACH,CAAC,CACH","file":"inbox-server.cjs","sourcesContent":["// inbox-server.ts\nimport express from \"express\";\n\nconst actionCallbacks = new Map<string, () => Promise<void>>();\n\nexport async function startInboxServer(port: number): Promise<express.Express> {\n  const app = express();\n  app.use(express.json());\n\n  // cors middleware\n  app.use((req, res, next) => {\n    res.header(\"Access-Control-Allow-Origin\", \"*\");\n    res.header(\"Access-Control-Allow-Methods\", \"GET, POST, OPTIONS\");\n    res.header(\"Access-Control-Allow-Headers\", \"Content-Type\");\n\n    if (req.method === \"OPTIONS\") {\n      res.sendStatus(200);\n      return;\n    }\n    next();\n  });\n\n  app.post(\"/action\", (req, res) => {\n    const { action } = req.body;\n    const callback = actionCallbacks.get(action);\n    if (callback) {\n      callback()\n        .then(() => {\n          res.json({ success: true });\n          actionCallbacks.delete(action);\n        })\n        .catch((error) => {\n          console.error(\"action callback failed:\", error);\n          res.status(500).json({ success: false, error: error.message });\n        });\n    } else {\n      res.status(404).json({ success: false, error: \"action not found\" });\n    }\n  });\n\n  return new Promise((resolve) => {\n    app.listen(port, () => {\n      console.log(`action server listening on port ${port}`);\n      resolve(app);\n    });\n  });\n}\n\nexport { actionCallbacks };\n"]}