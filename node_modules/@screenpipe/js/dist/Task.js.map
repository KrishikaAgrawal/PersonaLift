{"version":3,"sources":["../src/Task.ts"],"names":["Task","name","interval","time","handler","cronExpression","cron","value","unit"],"mappings":"yBAEO,IAAMA,CAAN,CAAA,KAAW,CACR,KACA,CAAA,SAAA,CACA,KAAuB,CAAA,IAAA,CACvB,SAAyC,IACzC,CAAA,SAAA,CAAwB,IAEhC,CAAA,WAAA,CAAYC,EAAc,CACxB,IAAA,CAAK,KAAQA,CAAAA,CAAAA,CACb,KAAK,SAAY,CAAA,EACnB,CAEA,KAAA,CAAMC,EAAiC,CACrC,OAAA,IAAA,CAAK,SAAYA,CAAAA,CAAAA,CACV,IACT,CAEA,EAAA,CAAGC,EAAoB,CACrB,OAAA,IAAA,CAAK,MAAQA,CACN,CAAA,IACT,CAEA,EAAA,CAAGC,EAAoC,CACrC,OAAA,IAAA,CAAK,QAAWA,CAAAA,CAAAA,CACT,IACT,CAEA,MAAM,QAA0B,EAAA,CAC9B,GAAI,CAAC,IAAA,CAAK,QACR,CAAA,MAAM,IAAI,KAAM,CAAA,CAAA,6BAAA,EAAgC,IAAK,CAAA,KAAK,EAAE,CAE9D,CAAA,IAAMC,CAAiB,CAAA,IAAA,CAAK,kBAE5B,CAAA,IAAA,CAAK,SAAYC,CAAAA,CAAAA,CAAK,SAASD,CAAgB,CAAA,IAAA,CAAK,SAAU,CAC5D,IAAA,CAAM,KAAK,KACb,CAAC,EACH,CAEA,MAAa,CACX,OAAO,IAAK,CAAA,SAAA,EAAW,MACzB,CAEQ,gBAA2B,EAAA,CACjC,GAAI,OAAO,IAAA,CAAK,SAAc,EAAA,QAAA,CAE5B,OAAO,CADS,EAAA,EAAA,IAAA,CAAK,KAAM,CAAA,IAAA,CAAK,UAAY,GAAK,CAC9B,CAGrB,QAAA,CAAA,CAAA,GAAM,CAACE,CAAOC,CAAAA,CAAI,CAAI,CAAA,IAAA,CAAK,UAAU,KAAM,CAAA,GAAG,EAC9C,OAAQA,CAAAA,EACN,IAAK,QAAA,CACL,IAAK,SAAA,CACH,OAAO,CAAKD,EAAAA,EAAAA,CAAK,CACnB,UAAA,CAAA,CAAA,IAAK,SACL,IAAK,SAAA,CACH,OAAO,CAAA,EAAA,EAAKA,CAAK,CACnB,QAAA,CAAA,CAAA,IAAK,MACL,CAAA,IAAK,QACH,OAAO,CAAA,IAAA,EAAOA,CAAK,CAAA,MAAA,CAAA,CACrB,IAAK,KACL,CAAA,IAAK,MACH,CAAA,OAAO,SAASA,CAAK,CAAA,IAAA,CAAA,CACvB,QACE,MAAM,IAAI,KAAM,CAAA,CAAA,2BAAA,EAA8BC,CAAI,CAAE,CAAA,CACxD,CACF,CACF","file":"Task.js","sourcesContent":["import cron from \"node-cron\";\n\nexport class Task {\n  private _name: string;\n  private _interval: string | number;\n  private _time: string | null = null;\n  private _handler: (() => Promise<void>) | null = null;\n  private _cronTask: any | null = null;\n\n  constructor(name: string) {\n    this._name = name;\n    this._interval = 0;\n  }\n\n  every(interval: string | number): Task {\n    this._interval = interval;\n    return this;\n  }\n\n  at(time: string): Task {\n    this._time = time;\n    return this;\n  }\n\n  do(handler: () => Promise<void>): Task {\n    this._handler = handler;\n    return this;\n  }\n\n  async schedule(): Promise<void> {\n    if (!this._handler) {\n      throw new Error(`No handler defined for task: ${this._name}`);\n    }\n    const cronExpression = this.toCronExpression();\n\n    this._cronTask = cron.schedule(cronExpression, this._handler, {\n      name: this._name,\n    });\n  }\n\n  stop(): void {\n    return this._cronTask?.stop();\n  }\n\n  private toCronExpression(): string {\n    if (typeof this._interval === \"number\") {\n      const minutes = Math.floor(this._interval / 60000);\n      return `*/${minutes} * * * *`;\n    }\n\n    const [value, unit] = this._interval.split(\" \");\n    switch (unit) {\n      case \"second\":\n      case \"seconds\":\n        return `*/${value} * * * * *`;\n      case \"minute\":\n      case \"minutes\":\n        return `*/${value} * * * *`;\n      case \"hour\":\n      case \"hours\":\n        return `0 */${value} * * *`;\n      case \"day\":\n      case \"days\":\n        return `0 0 */${value} * *`;\n      default:\n        throw new Error(`Unsupported interval unit: ${unit}`);\n    }\n  }\n}\n"]}