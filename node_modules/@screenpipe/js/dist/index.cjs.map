{"version":3,"sources":["../../common/utils.ts","../src/SettingsManager.ts","../src/InboxManager.ts","../../common/PipesManager.ts","../../common/analytics.ts","../../common/Operator.ts","../src/index.ts"],"names":["flattenObject","obj","prefix","acc","k","pre","unflattenObject","result","key","keys","current","i","toCamelCase","str","group","toSnakeCase","letter","convertObjectToSnakeCase","snakeKey","convertObjectToCamelCase","camelKey","getDefaultSettings","DEFAULT_SETTINGS","SettingsManager","platform","home","os","baseDir","path","xdgData","profilesPath","activeProfile","profilesData","fs","profiles","data","rawSettings","error","flattenedSettings","value","newSettings","namespace","settings","getAvailablePort","resolve","reject","server","createServer","port","InboxManager","message","fork","action","actionId","PipesManager","response","url","pipeId","config","pipeName","initialized","analyticsClient","POSTHOG_KEY","POSTHOG_HOST","setAnalyticsClient","client","initAnalytics","userId","email","captureEvent","name","properties","distinct_id","restProperties","captureMainFeatureEvent","Operator","baseUrl","text","x","y","button","options","selector","ElementLocator","responseText","errorData","role","id","request","index","keyCombo","applicationName","browser","maxDepth","elements","maxResults","startTime","timeout","element","direction","amount","posthog","NodePipe","notificationApiUrl","params","queryParams","errorText","errorJson","eventName","featureName","pipe"],"mappings":"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","file":"index.cjs","sourcesContent":["import type { Settings } from \"./types\";\n\n// Helper functions to flatten/unflatten objects\nconst flattenObject = (obj: any, prefix = \"\"): Record<string, any> => {\n  return Object.keys(obj).reduce((acc: Record<string, any>, k: string) => {\n    const pre = prefix.length ? prefix + \".\" : \"\";\n    if (\n      typeof obj[k] === \"object\" &&\n      obj[k] !== null &&\n      !Array.isArray(obj[k])\n    ) {\n      Object.assign(acc, flattenObject(obj[k], pre + k));\n    } else {\n      acc[pre + k] = obj[k];\n    }\n    return acc;\n  }, {});\n};\n\nconst unflattenObject = (obj: Record<string, any>): any => {\n  const result: any = {};\n  for (const key in obj) {\n    const keys = key.split(\".\");\n    let current = result;\n    for (let i = 0; i < keys.length; i++) {\n      const k = keys[i];\n      if (i === keys.length - 1) {\n        current[k] = obj[key];\n      } else {\n        current[k] = current[k] || {};\n        current = current[k];\n      }\n    }\n  }\n  return result;\n};\n// Helper functions that work in both environments\nfunction toCamelCase(str: string): string {\n  return str.replace(/([-_][a-z])/g, (group) =>\n    group.toUpperCase().replace(\"-\", \"\").replace(\"_\", \"\")\n  );\n}\n\nfunction toSnakeCase(str: string): string {\n  return str.replace(/[A-Z]/g, (letter) => `_${letter.toLowerCase()}`);\n}\n\n// function to convert any object all properties to snake case\nfunction convertObjectToSnakeCase(obj: any): any {\n  return Object.keys(obj).reduce((result, key) => {\n    const snakeKey = toSnakeCase(key);\n    result[snakeKey] = convertObjectToSnakeCase(obj[key]);\n    return result;\n  }, {} as any);\n}\n\nfunction convertObjectToCamelCase(obj: any): any {\n  if (Array.isArray(obj)) {\n    return obj.map(convertObjectToCamelCase);\n  } else if (obj !== null && typeof obj === \"object\") {\n    return Object.keys(obj).reduce((result, key) => {\n      const camelKey = toCamelCase(key);\n      result[camelKey] = convertObjectToCamelCase(obj[key]);\n      return result;\n    }, {} as any);\n  }\n  return obj;\n}\n\nfunction getDefaultSettings(): Settings {\n  return {\n    openaiApiKey: \"\",\n    deepgramApiKey: \"\",\n    aiModel: \"gpt-4o\",\n    aiUrl: \"https://api.openai.com/v1\",\n    customPrompt: `Rules:\n    - You can analyze/view/show/access videos to the user by putting .mp4 files in a code block (we'll render it) like this: \\`/users/video.mp4\\`, use the exact, absolute, file path from file_path property\n    - Do not try to embed video in links (e.g. [](.mp4) or https://.mp4) instead put the file_path in a code block using backticks\n    - Do not put video in multiline code block it will not render the video (e.g. \\`\\`\\`bash\\n.mp4\\`\\`\\` IS WRONG) instead using inline code block with single backtick\n    - Always answer my question/intent, do not make up things\n    `,\n    port: 3030,\n    dataDir: \"default\",\n    disableAudio: false,\n    ignoredWindows: [],\n    includedWindows: [],\n    aiProviderType: \"openai\",\n    embeddedLLM: {\n      enabled: false,\n      model: \"llama3.2:1b-instruct-q4_K_M\",\n      port: 11434,\n    },\n    enableFrameCache: true,\n    enableUiMonitoring: false,\n    aiMaxContextChars: 512000,\n    analyticsEnabled: true,\n    user: {\n      token: \"\",\n    },\n    customSettings: {},\n    monitorIds: [\"default\"],\n    audioDevices: [\"default\"],\n    audioTranscriptionEngine: \"whisper-large-v3-turbo\",\n    enableRealtimeAudioTranscription: false,\n    realtimeAudioTranscriptionEngine: \"deepgram\",\n    disableVision: false,\n    aiPresets: [],\n  };\n}\n\nexport {\n  flattenObject,\n  unflattenObject,\n  toCamelCase,\n  toSnakeCase,\n  convertObjectToSnakeCase,\n  convertObjectToCamelCase,\n  getDefaultSettings,\n};\n","import fs from \"fs/promises\";\nimport path from \"path\";\nimport os from \"os\";\nimport {\n  flattenObject,\n  getDefaultSettings,\n  unflattenObject,\n} from \"../../common/utils\";\nimport type { Settings } from \"../../common/types\";\n\nconst DEFAULT_SETTINGS = getDefaultSettings();\n\nexport class SettingsManager {\n  private settings: Settings;\n  private storePath: string;\n  private initialized: boolean = false;\n\n  constructor() {\n    this.settings = DEFAULT_SETTINGS;\n    this.storePath = \"\"; // will be set in init()\n  }\n\n  private async getStorePath(): Promise<string> {\n    const platform = process.platform;\n    const home = os.homedir();\n\n    // Get base screenpipe data directory path based on platform\n    let baseDir: string;\n    switch (platform) {\n      case \"darwin\":\n        baseDir = path.join(\n          home,\n          \"Library\",\n          \"Application Support\",\n          \"screenpipe\"\n        );\n        break;\n      case \"linux\":\n        const xdgData =\n          process.env.XDG_DATA_HOME || path.join(home, \".local\", \"share\");\n        baseDir = path.join(xdgData, \"screenpipe\");\n        break;\n      case \"win32\":\n        baseDir = path.join(\n          process.env.LOCALAPPDATA || path.join(home, \"AppData\", \"Local\"),\n          \"screenpipe\"\n        );\n        break;\n      default:\n        throw new Error(`unsupported platform: ${platform}`);\n    }\n\n    // First check profiles.bin to get active profile\n    const profilesPath = path.join(baseDir, \"profiles.bin\");\n    let activeProfile = \"default\";\n    try {\n      const profilesData = await fs.readFile(profilesPath);\n      const profiles = JSON.parse(profilesData.toString());\n      if (profiles.activeProfile) {\n        activeProfile = profiles.activeProfile;\n      }\n    } catch (error) {\n      // Profiles file doesn't exist yet, use default\n    }\n\n    // Return store path for active profile\n    return activeProfile === \"default\"\n      ? path.join(baseDir, \"store.bin\")\n      : path.join(baseDir, `store-${activeProfile}.bin`);\n  }\n\n  async init(): Promise<void> {\n    // if (this.initialized) return;\n\n    if (!fs || !path) throw new Error(\"failed to load required modules\");\n\n    this.storePath = await this.getStorePath();\n\n    try {\n      await fs.mkdir(path.dirname(this.storePath), { recursive: true });\n      const data = await fs.readFile(this.storePath);\n      const rawSettings = JSON.parse(data.toString());\n      this.settings = { ...DEFAULT_SETTINGS, ...unflattenObject(rawSettings) };\n      this.initialized = true;\n    } catch (error) {\n      if ((error as { code?: string }).code === \"ENOENT\") {\n        await this.save();\n        this.initialized = true;\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  async save(): Promise<void> {\n    await fs.mkdir(path.dirname(this.storePath), { recursive: true });\n    const flattenedSettings = flattenObject(this.settings);\n    await fs.writeFile(\n      this.storePath,\n      JSON.stringify(flattenedSettings, null, 2)\n    );\n  }\n\n  async get<K extends keyof Settings>(key: K): Promise<Settings[K]> {\n    if (!this.initialized) await this.init();\n    return this.settings[key];\n  }\n\n  async set<K extends keyof Settings>(\n    key: K,\n    value: Settings[K]\n  ): Promise<void> {\n    if (!this.initialized) await this.init();\n    this.settings[key] = value;\n    await this.save();\n  }\n\n  async getAll(): Promise<Settings> {\n    await this.init();\n    return { ...this.settings };\n  }\n\n  async update(newSettings: Partial<Settings>): Promise<void> {\n    if (!this.initialized) await this.init();\n    this.settings = { ...this.settings, ...newSettings };\n    await this.save();\n  }\n\n  async reset(): Promise<void> {\n    this.settings = { ...DEFAULT_SETTINGS };\n    await this.save();\n  }\n\n  async resetKey<K extends keyof Settings>(key: K): Promise<void> {\n    if (!this.initialized) await this.init();\n    this.settings[key] = DEFAULT_SETTINGS[key];\n    await this.save();\n  }\n\n  async getCustomSetting(namespace: string, key: string): Promise<any> {\n    if (!this.initialized) await this.init();\n    return this.settings.customSettings?.[namespace]?.[key];\n  }\n\n  async setCustomSetting(\n    namespace: string,\n    key: string,\n    value: any\n  ): Promise<void> {\n    if (!this.initialized) await this.init();\n    this.settings.customSettings = this.settings.customSettings || {};\n    this.settings.customSettings[namespace] =\n      this.settings.customSettings[namespace] || {};\n    this.settings.customSettings[namespace][key] = value;\n    await this.save();\n  }\n\n  async getNamespaceSettings(\n    namespace: string\n  ): Promise<Record<string, any> | undefined> {\n    if (!this.initialized) await this.init();\n    return this.settings.customSettings?.[namespace];\n  }\n\n  async updateNamespaceSettings(\n    namespace: string,\n    settings: Record<string, any>\n  ): Promise<void> {\n    if (!this.initialized) await this.init();\n    this.settings.customSettings = this.settings.customSettings || {};\n    this.settings.customSettings[namespace] = settings;\n    await this.save();\n  }\n}\n","import { ChildProcess, fork } from \"child_process\";\nimport type { InboxMessage } from \"../../common/types\";\nimport { type AddressInfo, createServer } from \"net\";\n\nasync function getAvailablePort(): Promise<number> {\n  return new Promise((resolve, reject) => {\n    const server = createServer();\n    server.unref();\n    server.on(\"error\", reject);\n    server.listen(0, () => {\n      const port = (server.address() as AddressInfo).port;\n      server.close(() => resolve(port));\n    });\n  });\n}\n\nexport class InboxManager {\n  private actionServerPort?: number;\n  private actionServerProcess?: ChildProcess;\n\n  async send(message: InboxMessage): Promise<boolean> {\n    if (!this.actionServerPort) {\n      this.actionServerPort = await getAvailablePort();\n      this.actionServerProcess = fork(\"./inbox-server.js\", [\n        this.actionServerPort.toString(),\n      ]);\n    }\n\n    if (message.actions) {\n      message.actions = message.actions.map((action) => {\n        const actionId = crypto.randomUUID();\n        return {\n          label: action.label,\n          action: actionId,\n          port: this.actionServerPort,\n          callback: action.callback,\n        };\n      });\n    }\n\n    try {\n      const response = await fetch(\"http://localhost:11435/inbox\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          ...message,\n          type: \"inbox\",\n          actionServerPort: this.actionServerPort,\n        }),\n      });\n\n      return response.ok;\n    } catch (error) {\n      console.error(\"failed to send inbox message:\", error);\n      return false;\n    }\n  }\n}\n","type Result<T> = { success: true; data: T } | { success: false; error: any };\n\nexport class PipesManager {\n  async list(): Promise<Result<string[]>> {\n    try {\n      const apiUrl = \"http://localhost:3030\";\n      const response = await fetch(`${apiUrl}/pipes/list`, {\n        method: \"GET\",\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n\n      if (!response.ok) {\n        throw new Error(`http error! status: ${response.status}`);\n      }   \n\n      const data = await response.json();\n      return { success: true, data: data.data };\n    } catch (error) {\n      console.error(\"failed to list pipes:\", error);\n      return { success: false, error: error };\n    }\n  }\n\n  async download(url: string): Promise<Result<Record<string, any>>> {\n    try {\n      const apiUrl = \"http://localhost:3030\";\n      const response = await fetch(`${apiUrl}/pipes/download`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          url,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`http error! status: ${response.status}`);\n      }   \n\n      const data: Record<string, any> = await response.json();\n      return { success: true, data: data.data };\n    } catch (error) {\n      console.error(\"failed to download pipe:\", error);\n      return { success: false, error: error };\n    }\n  }\n\n  async enable(pipeId: string): Promise<boolean> {\n    try {\n      const apiUrl = \"http://localhost:3030\";\n      const response = await fetch(`${apiUrl}/pipes/enable`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          pipe_id: pipeId,\n        }),\n      });\n\n      return response.ok;\n    } catch (error) {\n      console.error(\"failed to enable pipe:\", error);\n      return false;\n    }\n  }\n\n  async disable(pipeId: string): Promise<boolean> {\n    try {\n      const apiUrl = \"http://localhost:3030\";\n      const response = await fetch(`${apiUrl}/pipes/disable`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          pipe_id: pipeId,\n        }),\n      });\n\n      return response.ok;\n    } catch (error) {\n      console.error(\"failed to disable pipe:\", error);\n      return false;\n    }\n  }\n\n  async update(\n    pipeId: string,\n    config: { [key: string]: string },\n  ): Promise<boolean> {\n    try {\n      const apiUrl = \"http://localhost:3030\";\n      const response = await fetch(`${apiUrl}/pipes/update`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          pipe_id: pipeId,\n          config,\n        }),\n      }); \n\n      return response.ok;\n    } catch (error) {\n      console.error(\"failed to update pipe:\", error);\n      return false;\n    }\n  }\n\n  async info(pipeId: string): Promise<Result<Record<string, any>>> {\n    try {\n      const apiUrl = \"http://localhost:3030\";\n      const response = await fetch(`${apiUrl}/pipes/info/${pipeId}`, {\n        method: \"GET\",\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n\n      if (!response.ok) {\n        throw new Error(`http error! status: ${response.status}`);\n      }\n\n      const data: Record<string, any> = await response.json();\n      return { success: true, data: data.data };\n    } catch (error) {\n      console.error(\"failed to get pipe info:\", error);\n      return { success: false, error: error };\n    }\n  }\n\n  async downloadPrivate(\n    url: string,\n    pipeName: string,\n    pipeId: string\n  ): Promise<Result<Record<string, any>>> {\n    try {\n      const apiUrl = \"http://localhost:3030\";\n      const response = await fetch(`${apiUrl}/pipes/download-private`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          url,\n          pipe_name: pipeName,\n          pipe_id: pipeId,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`http error! status: ${response.status}`);\n      }\n\n      const data: Record<string, any> = await response.json();\n      return { success: true, data: data.data };\n    } catch (error) {\n      console.error(\"failed to download private pipe:\", error);\n      return { success: false, error: error };\n    }\n  }\n\n  async delete(pipeId: string): Promise<boolean> {\n    try {\n      const apiUrl = \"http://localhost:3030\";\n      const response = await fetch(`${apiUrl}/pipes/delete`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          pipe_id: pipeId,\n        }),\n      });\n\n      return response.ok;\n    } catch (error) {\n      console.error(\"failed to delete pipe:\", error);\n      return false;\n    }\n  }\n}\n\n","export interface AnalyticsClient {\n  init: (key: string, config: any) => void;\n  identify: (userId?: string, properties?: any) => void;\n  capture: (name: string, properties?: any) => void;\n}\n\nlet initialized = false;\nlet analyticsClient: AnalyticsClient | null = null;\n\nconst POSTHOG_KEY = \"phc_Bt8GoTBPgkCpDrbaIZzJIEYt0CrJjhBiuLaBck1clce\";\nconst POSTHOG_HOST = \"https://eu.i.posthog.com\";\n\nexport function setAnalyticsClient(client: AnalyticsClient) {\n  analyticsClient = client;\n}\n\nfunction initAnalytics(userId?: string, email?: string) {\n  if (!initialized && analyticsClient) {\n    analyticsClient.init(POSTHOG_KEY, {\n      api_host: POSTHOG_HOST,\n      distinct_id: userId,\n      email: email,\n    });\n    analyticsClient.identify(userId, { email: email });\n    initialized = true;\n  }\n}\n\nexport async function captureEvent(\n  name: string,\n  properties?: Record<string, any>\n): Promise<void> {\n  if (!analyticsClient) return;\n  initAnalytics(properties?.distinct_id, properties?.email);\n  const { distinct_id, ...restProperties } = properties || {};\n  analyticsClient.capture(name, restProperties);\n}\n\nexport async function captureMainFeatureEvent(\n  name: string,\n  properties?: Record<string, any>\n): Promise<void> {\n  if (!analyticsClient) return;\n  initAnalytics(properties?.distinct_id, properties?.email);\n  const { distinct_id, ...restProperties } = properties || {};\n  analyticsClient.capture(name, {\n    feature: \"main\",\n    ...restProperties,\n  });\n}\n","import type {\n  ElementInfo,\n  ElementSelector,\n  ElementPosition,\n  ElementSize,\n  ElementStats,\n} from \"./types\";\nimport { convertObjectToCamelCase, convertObjectToSnakeCase } from \"./utils\";\n\nexport interface ClickResult {\n  method: \"AXPress\" | \"AXClick\" | \"MouseSimulation\"; // TODO: get rid of that hardcoded macos thing ...\n  coordinates?: [number, number];\n  details: string;\n}\n\nexport interface TextRequest {\n  appName: string;\n  windowName?: string;\n  maxDepth?: number;\n  useBackgroundApps?: boolean;\n  activateApp?: boolean;\n}\n\nexport interface GetTextMetadata {\n  extractionTimeMs: number;\n  elementCount: number;\n  appName: string;\n  timestampUtc: string;\n}\n\nexport interface TextResponse {\n  success: boolean;\n  text: string;\n  metadata?: GetTextMetadata;\n}\n\nexport interface InteractableElementsRequest {\n  appName: string;\n  windowName?: string;\n  withTextOnly?: boolean;\n  interactableOnly?: boolean;\n  includeSometimesInteractable?: boolean;\n  maxElements?: number;\n  useBackgroundApps?: boolean;\n  activateApp?: boolean;\n}\n\nexport interface InteractableElement {\n  index: number;\n  role: string;\n  interactability: string; // \"definite\", \"sometimes\", \"none\"\n  text: string;\n  position?: ElementPosition;\n  size?: ElementSize;\n  elementId?: string;\n}\n\nexport interface InteractableElementsResponse {\n  elements: InteractableElement[];\n  stats: ElementStats;\n}\n\nexport interface InputAction {\n  type: string;\n  data: any;\n}\n\nexport interface InputControlResponse {\n  success: boolean;\n}\n\nexport class Operator {\n  private baseUrl: string;\n  public pixel: {\n    type: (text: string) => Promise<boolean>;\n    press: (key: string) => Promise<boolean>;\n    moveMouse: (x: number, y: number) => Promise<boolean>;\n    click: (button: \"left\" | \"right\" | \"middle\") => Promise<boolean>;\n  };\n\n  constructor(baseUrl: string = \"http://localhost:3030\") {\n    this.baseUrl = baseUrl;\n\n    this.pixel = {\n      type: (text: string) =>\n        this.sendInputControl({ type: \"WriteText\", data: text }),\n      press: (key: string) =>\n        this.sendInputControl({ type: \"KeyPress\", data: key }),\n      moveMouse: (x: number, y: number) =>\n        this.sendInputControl({ type: \"MouseMove\", data: { x, y } }),\n      click: (button: \"left\" | \"right\" | \"middle\") =>\n        this.sendInputControl({ type: \"MouseClick\", data: button }),\n    };\n  }\n\n  private async sendInputControl(action: InputAction): Promise<boolean> {\n    try {\n      const response = await fetch(\n        `${this.baseUrl}/experimental/operator/pixel`,\n        {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ action }),\n        }\n      );\n      if (!response.ok) {\n        throw new Error(`http error! status: ${response.status}`);\n      }\n      const data: InputControlResponse = await response.json();\n      return data.success;\n    } catch (error) {\n      console.error(\"failed to control input:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Find UI elements on screen matching the given criteria\n   *\n   * @example\n   * // Find all buttons in Chrome\n   * const buttons = await pipe.operator.locator({\n   *   app: \"Chrome\",\n   *   role: \"button\"\n   * }).all();\n   *\n   * You can also use MacOS accessibility roles (eg. \"AXButton\", \"AXTextField\", \"AXCheckbox\", etc.), check MacOS Accessibility App to see the list of roles\n   *\n   * @example\n   * // Find a specific element by id\n   * const element = await pipe.operator.locator({\n   *   app: \"WhatsApp\",\n   *   id: \"1234\"\n   * }).first();\n   */\n  locator(options: {\n    app: string;\n    window?: string;\n    role?: string;\n    id?: string;\n    useBackgroundApps?: boolean;\n    activateApp?: boolean;\n  }) {\n    if (options.role && options.id) {\n      throw new Error(\n        \"only one of 'role' or 'id' can be specified. need both? dm us!\"\n      );\n    }\n\n    const selector: ElementSelector = {\n      app_name: options.app,\n      window_name: options.window,\n      locator: options.role || (options.id ? `#${options.id}` : \"\"),\n      use_background_apps: options.useBackgroundApps,\n      activate_app: options.activateApp,\n    };\n\n    return new ElementLocator(this.baseUrl, selector);\n  }\n\n  /**\n   * Find and click an element on screen\n   *\n   * @returns Detailed information about the click operation\n   *\n   * @example\n   * // Click a button with text \"Submit\" and get details about how it was clicked\n   * const result = await pipe.operator.click({\n   *   app: \"Chrome\",\n   *   id: \"1234\"\n   * });\n   * console.log(`Click method: ${result.method}, Details: ${result.details}`);\n   */\n  async click(options: {\n    id: string;\n    app: string;\n    window?: string;\n    useBackgroundApps?: boolean;\n    activateApp?: boolean;\n  }): Promise<ClickResult> {\n    const selector: ElementSelector = {\n      app_name: options.app,\n      window_name: options.window,\n      locator: `#${options.id}`,\n      use_background_apps: options.useBackgroundApps,\n      activate_app: options.activateApp !== false,\n    };\n\n    const response = await fetch(\n      `${this.baseUrl}/experimental/operator/click`,\n      {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ selector }),\n      }\n    );\n\n    if (!response.ok) {\n      const responseText = await response.text();\n      console.log(\"error response:\", responseText);\n\n      try {\n        const errorData = JSON.parse(responseText);\n        throw new Error(\n          `failed to click element: ${errorData.error || response.statusText}`\n        );\n      } catch (parseError) {\n        throw new Error(\n          `failed to click element (status ${response.status}): ${\n            responseText || response.statusText\n          }`\n        );\n      }\n    }\n\n    const data = await response.json();\n    console.log(\"debug: click response data:\", JSON.stringify(data, null, 2));\n\n    if (!data.success) {\n      throw new Error(\n        `click operation failed: ${data.error || \"unknown error\"}`\n      );\n    }\n\n    // Handle different possible response structures\n    if (data.result) {\n      // If data.result contains the expected structure\n      return convertObjectToCamelCase(data.result) as ClickResult;\n    } else if (data.method) {\n      // If the ClickResult fields are directly on the data object\n      return {\n        method: data.method,\n        coordinates: data.coordinates,\n        details: data.details || \"Click operation succeeded\",\n      } as ClickResult;\n    } else {\n      // Fallback with minimal information\n      console.log(\n        \"warning: click response missing expected structure, creating fallback object\"\n      );\n      return {\n        method: \"MouseSimulation\",\n        coordinates: undefined,\n        details:\n          \"Click operation succeeded but returned unexpected data structure\",\n      };\n    }\n  }\n\n  /**\n   * Find an element and type text into it\n   *\n   * @example\n   * // Type \"hi darling\" into the message field\n   * await pipe.operator.fill({\n   *   app: \"WhatsApp\",\n   *   id: \"1234\",\n   *   value: \"hi darling\"\n   * });\n   */\n  async fill(options: {\n    app: string;\n    id?: string;\n    useBackgroundApps?: boolean;\n    activateApp?: boolean;\n    value: string;\n  }) {\n    const selector: ElementSelector = {\n      app_name: options.app,\n      locator: `#${options.id}`,\n      use_background_apps: options.useBackgroundApps,\n      activate_app: options.activateApp !== false,\n    };\n\n    console.log(\"selector\", selector);\n\n    const response = await fetch(`${this.baseUrl}/experimental/operator/type`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        selector,\n        text: options.value,\n      }),\n    });\n\n    if (!response.ok) {\n      const responseText = await response.text();\n      console.log(\"error response:\", responseText);\n\n      try {\n        const errorData = JSON.parse(responseText);\n        throw new Error(\n          `failed to type text: ${errorData.error || response.statusText}`\n        );\n      } catch (parseError) {\n        throw new Error(\n          `failed to type text (status ${response.status}): ${\n            responseText || response.statusText\n          }`\n        );\n      }\n    }\n\n    const result = await response.json();\n    return result.success;\n  }\n\n  /**\n   * Get locator for elements with the specified role (eg. \"button\", \"textfield\", \"checkbox\", etc.)\n   * You can also use MacOS accessibility roles (eg. \"AXButton\", \"AXTextField\", \"AXCheckbox\", etc.), check MacOS Accessibility App to see the list of roles\n   *\n   * @example\n   * // Find element(s) with role \"button\" in Chrome\n   * const buttons = await pipe.operator.getByRole('button', { app: 'Chrome' });\n   */\n  getByRole(\n    role: string,\n    options?: {\n      app?: string;\n      window?: string;\n      useBackgroundApps?: boolean;\n      activateApp?: boolean;\n    }\n  ): ElementLocator {\n    return this.locator({\n      app: options?.app || \"\",\n      window: options?.window,\n      role,\n      useBackgroundApps: options?.useBackgroundApps,\n      activateApp: options?.activateApp,\n    });\n  }\n\n  /**\n   * Get locator for elements with the specified id\n   *\n   * @example\n   * // Find an element with a specific ID\n   * await pipe.operator.getById('submit-button', { app: 'Chrome' })\n   */\n  getById(\n    id: string,\n    options?: {\n      app?: string;\n      window?: string;\n      useBackgroundApps?: boolean;\n      activateApp?: boolean;\n    }\n  ): ElementLocator {\n    return this.locator({\n      app: options?.app || \"\",\n      window: options?.window,\n      id,\n      useBackgroundApps: options?.useBackgroundApps,\n      activateApp: options?.activateApp,\n    });\n  }\n\n  /**\n   * get text on the screen\n   *\n   * @returns Detailed information about get_text operation\n   *\n   * @example\n   * // Gets all the text from an app\n   * await browserPipe.operator\n   *   .getText({\n   *     app: app,\n   *   });\n   */\n  async getText(options: {\n    app: string;\n    window?: string;\n    maxDepth?: number;\n    useBackgroundApps?: boolean;\n    activateApp?: boolean;\n  }): Promise<TextResponse> {\n    const text: TextRequest = {\n      appName: options.app,\n      windowName: options.window,\n      maxDepth: options.maxDepth,\n      useBackgroundApps: options.useBackgroundApps,\n      activateApp: options.activateApp !== false,\n    };\n\n    const response = await fetch(\n      `${this.baseUrl}/experimental/operator/get_text`,\n      {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(convertObjectToSnakeCase(text)),\n      }\n    );\n\n    if (!response.ok) {\n      const responseText = await response.text();\n      console.log(\"error response:\", responseText);\n\n      try {\n        const errorData = JSON.parse(responseText);\n        throw new Error(\n          `failed to get text: ${errorData.error || response.statusText}`\n        );\n      } catch (parseError) {\n        throw new Error(\n          `failed to get text (status ${response.status}): ${\n            responseText || response.statusText\n          }`\n        );\n      }\n    }\n\n    const data = await response.json();\n    console.log(\"debug: text response data:\", JSON.stringify(data, null, 2));\n\n    if (!data.success) {\n      throw new Error(\n        `get_text operation failed: ${data.error || \"unknown error\"}`\n      );\n    }\n\n    return convertObjectToCamelCase(data) as TextResponse;\n  }\n\n  /**\n   * get text on the screen\n   *\n   * @returns Detailed information about get_text operation\n   *\n   * @example\n   * // Gets all the text from an app\n   * await browserPipe.operator\n   *   .getInteractableElements({\n   *     app: app,\n   *   });\n   */\n  async getInteractableElements(options: {\n    app: string;\n    window?: string;\n    withTextOnly?: boolean;\n    interactableOnly?: boolean;\n    includeSometimesInteractable?: boolean;\n    maxElements?: number;\n    useBackgroundApps?: boolean;\n    activateApp?: boolean;\n  }): Promise<InteractableElementsResponse> {\n    const request: InteractableElementsRequest = {\n      appName: options.app,\n      windowName: options.window,\n      withTextOnly: options.withTextOnly,\n      interactableOnly: options.interactableOnly,\n      includeSometimesInteractable: options.includeSometimesInteractable,\n      maxElements: options.maxElements,\n      useBackgroundApps: options.useBackgroundApps,\n      activateApp: options.activateApp,\n    };\n\n    const response = await fetch(\n      `${this.baseUrl}/experimental/operator/list-interactable-elements`,\n      {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(convertObjectToSnakeCase(request)),\n      }\n    );\n\n    if (!response.ok) {\n      const responseText = await response.text();\n      console.log(\"error response:\", responseText);\n\n      try {\n        const errorData = JSON.parse(responseText);\n        throw new Error(\n          `failed to get interactable elements: ${\n            errorData.error || response.statusText\n          }`\n        );\n      } catch (parseError) {\n        throw new Error(\n          `failed to get interactable elements (status ${response.status}): ${\n            responseText || response.statusText\n          }`\n        );\n      }\n    }\n\n    const data = await response.json();\n    console.log(\"debug: text response data:\", JSON.stringify(data, null, 2));\n\n    return convertObjectToCamelCase(data) as InteractableElementsResponse;\n  }\n\n  /**\n   * Click an element by its index from the cached element list\n   *\n   * @example\n   * // Click the element at index 5\n   * await pipe.operator.clickByIndex(5);\n   */\n  async clickByIndex(index: number): Promise<boolean> {\n    const response = await fetch(\n      `${this.baseUrl}/experimental/operator/click-by-index`,\n      {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ element_index: index }),\n      }\n    );\n\n    if (!response.ok) {\n      const responseText = await response.text();\n      console.log(\"error response:\", responseText); // Add logging for debugging\n\n      try {\n        const errorData = JSON.parse(responseText);\n        throw new Error(\n          `failed to click element by index: ${\n            errorData.error || response.statusText\n          }`\n        );\n      } catch (parseError) {\n        throw new Error(\n          `failed to click element by index (status ${response.status}): ${\n            responseText || response.statusText\n          }`\n        );\n      }\n    }\n\n    const data = await response.json();\n\n    if (!data.success) {\n      throw new Error(\n        `click operation failed: ${data.message || \"unknown error\"}`\n      );\n    }\n\n    return data.success;\n  }\n\n  /**\n   * Type text into an element by its index from the cached element list\n   *\n   * @example\n   * // Type \"hello world\" into the element at index 3\n   * await pipe.operator.typeByIndex(3, \"hello world\");\n   */\n  async typeByIndex(index: number, text: string): Promise<boolean> {\n    const response = await fetch(\n      `${this.baseUrl}/experimental/operator/type-by-index`,\n      {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ element_index: index, text }),\n      }\n    );\n\n    if (!response.ok) {\n      const responseText = await response.text();\n      console.log(\"error response:\", responseText); // Add logging for debugging\n\n      try {\n        const errorData = JSON.parse(responseText);\n        throw new Error(\n          `failed to type text into element by index: ${\n            errorData.error || response.statusText\n          }`\n        );\n      } catch (parseError) {\n        throw new Error(\n          `failed to type text into element by index (status ${\n            response.status\n          }): ${responseText || response.statusText}`\n        );\n      }\n    }\n\n    const data = await response.json();\n\n    if (!data.success) {\n      throw new Error(\n        `type operation failed: ${data.message || \"unknown error\"}`\n      );\n    }\n\n    return data.success;\n  }\n\n  /**\n   * Find an element and press a key combination on it\n   *\n   * @example\n   * // Press Tab key on a text field\n   * await pipe.operator.pressKey({\n   *   app: \"Chrome\",\n   *   label: \"Email\",\n   *   key: \"tab\"\n   * });\n   *\n   * @example\n   * // Press keyboard shortcut Command+C on a text field\n   * await pipe.operator.pressKey({\n   *   app: \"Safari\",\n   *   role: \"textfield\",\n   *   key: \"cmd+c\"\n   * });\n   */\n  async pressKey(options: {\n    app: string;\n    window?: string;\n    id?: string;\n    useBackgroundApps?: boolean;\n    activateApp?: boolean;\n    key: string;\n  }) {\n    const selector: ElementSelector = {\n      app_name: options.app,\n      window_name: options.window,\n      locator: `#${options.id}`,\n      use_background_apps: options.useBackgroundApps,\n      activate_app: options.activateApp !== false,\n    };\n\n    const response = await fetch(\n      `${this.baseUrl}/experimental/operator/press-key`,\n      {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(\n          convertObjectToSnakeCase({\n            selector,\n            keyCombo: options.key,\n          })\n        ),\n      }\n    );\n\n    if (!response.ok) {\n      const responseText = await response.text();\n      console.log(\"error response:\", responseText);\n\n      try {\n        const errorData = JSON.parse(responseText);\n        throw new Error(\n          `failed to press key: ${errorData.error || response.statusText}`\n        );\n      } catch (parseError) {\n        throw new Error(\n          `failed to press key (status ${response.status}): ${\n            responseText || response.statusText\n          }`\n        );\n      }\n    }\n\n    const result = await response.json();\n    return result.success;\n  }\n\n  /**\n   * Press a key combination on an element by its index from the cached element list\n   *\n   * @example\n   * // Press Tab key on the element at index 5\n   * await pipe.operator.pressKeyByIndex(5, \"tab\");\n   *\n   * @example\n   * // Press Command+A (Select All) on the element at index 2\n   * await pipe.operator.pressKeyByIndex(2, \"cmd+a\");\n   */\n  async pressKeyByIndex(index: number, keyCombo: string): Promise<boolean> {\n    const response = await fetch(\n      `${this.baseUrl}/experimental/operator/press-key-by-index`,\n      {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ element_index: index, key_combo: keyCombo }),\n      }\n    );\n\n    if (!response.ok) {\n      const responseText = await response.text();\n      console.log(\"error response:\", responseText);\n\n      try {\n        const errorData = JSON.parse(responseText);\n        throw new Error(\n          `failed to press key on element by index: ${\n            errorData.error || response.statusText\n          }`\n        );\n      } catch (parseError) {\n        throw new Error(\n          `failed to press key on element by index (status ${\n            response.status\n          }): ${responseText || response.statusText}`\n        );\n      }\n    }\n\n    const data = await response.json();\n\n    if (!data.success) {\n      throw new Error(\n        `press key operation failed: ${data.message || \"unknown error\"}`\n      );\n    }\n\n    return data.success;\n  }\n\n  /**\n   * Open an application by name\n   *\n   * @example\n   * // Open Chrome browser\n   * await pipe.operator.openApplication(\"Chrome\");\n   */\n  async openApplication(applicationName: string): Promise<boolean> {\n    const response = await fetch(\n      `${this.baseUrl}/experimental/operator/open-application`,\n      {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ app_name: applicationName }),\n      }\n    );\n\n    if (!response.ok) {\n      const responseText = await response.text();\n      console.log(\"error response:\", responseText);\n\n      try {\n        const errorData = JSON.parse(responseText);\n        throw new Error(\n          `failed to open application: ${\n            errorData.error || response.statusText\n          }`\n        );\n      } catch (parseError) {\n        throw new Error(\n          `failed to open application (status ${response.status}): ${\n            responseText || response.statusText\n          }`\n        );\n      }\n    }\n\n    const data = await response.json();\n\n    if (!data.success) {\n      throw new Error(\n        `open application operation failed: ${data.message || \"unknown error\"}`\n      );\n    }\n\n    return data.success;\n  }\n\n  /**\n   * Open a URL in the specified browser or default browser\n   *\n   * @example\n   * // Open URL in default browser\n   * await pipe.operator.openUrl(\"https://example.com\");\n   *\n   * @example\n   * // Open URL in specified browser\n   * await pipe.operator.openUrl(\"https://example.com\", \"Chrome\");\n   */\n  async openUrl(url: string, browser?: string): Promise<boolean> {\n    const response = await fetch(\n      `${this.baseUrl}/experimental/operator/open-url`,\n      {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          url,\n          browser,\n        }),\n      }\n    );\n\n    if (!response.ok) {\n      const responseText = await response.text();\n      console.log(\"error response:\", responseText);\n\n      try {\n        const errorData = JSON.parse(responseText);\n        throw new Error(\n          `failed to open url: ${errorData.error || response.statusText}`\n        );\n      } catch (parseError) {\n        throw new Error(\n          `failed to open url (status ${response.status}): ${\n            responseText || response.statusText\n          }`\n        );\n      }\n    }\n\n    const data = await response.json();\n\n    if (!data.success) {\n      throw new Error(\n        `open url operation failed: ${data.message || \"unknown error\"}`\n      );\n    }\n\n    return data.success;\n  }\n\n  /**\n   * Scroll an element in the specified direction\n   *\n   * @example\n   * // Scroll down in a scrollable element\n   * await pipe.operator.scroll({\n   *   app: \"Chrome\",\n   *   id: \"content-area\",\n   *   direction: \"down\",\n   *   amount: 100\n   * });\n   */\n  async scroll(options: {\n    app: string;\n    id?: string;\n    window?: string;\n    useBackgroundApps?: boolean;\n    activateApp?: boolean;\n    direction: \"up\" | \"down\" | \"left\" | \"right\";\n    amount: number;\n  }): Promise<boolean> {\n    const selector: ElementSelector = {\n      app_name: options.app,\n      window_name: options.window,\n      locator: options.id ? `#${options.id}` : \"\",\n      use_background_apps: options.useBackgroundApps,\n      activate_app: options.activateApp !== false,\n    };\n\n    const response = await fetch(\n      `${this.baseUrl}/experimental/operator/scroll`,\n      {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          selector,\n          direction: options.direction,\n          amount: options.amount,\n        }),\n      }\n    );\n\n    if (!response.ok) {\n      const responseText = await response.text();\n      console.log(\"error response:\", responseText);\n\n      try {\n        const errorData = JSON.parse(responseText);\n        throw new Error(\n          `failed to scroll element: ${errorData.error || response.statusText}`\n        );\n      } catch (parseError) {\n        throw new Error(\n          `failed to scroll element (status ${response.status}): ${\n            responseText || response.statusText\n          }`\n        );\n      }\n    }\n\n    const data = await response.json();\n    return data.success;\n  }\n}\n\nclass ElementLocator {\n  private baseUrl: string;\n  private selector: ElementSelector;\n\n  constructor(baseUrl: string, selector: ElementSelector) {\n    this.baseUrl = baseUrl;\n    this.selector = selector;\n  }\n\n  /**\n   * Get the first element matching the selector\n   */\n  async first(maxDepth?: number): Promise<ElementInfo | null> {\n    const elements = await this.all(1, maxDepth);\n    return elements.length > 0 ? elements[0] : null;\n  }\n\n  /**\n   * Get all elements matching the selector\n   */\n  async all(maxResults?: number, maxDepth?: number): Promise<ElementInfo[]> {\n    const response = await fetch(`${this.baseUrl}/experimental/operator`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        selector: this.selector,\n        max_results: maxResults,\n        max_depth: maxDepth,\n      }),\n    });\n\n    if (!response.ok) {\n      const responseText = await response.text();\n      console.log(\"error response:\", responseText);\n\n      try {\n        const errorData = JSON.parse(responseText);\n        throw new Error(\n          `failed to find elements: ${errorData.error || response.statusText}`\n        );\n      } catch (parseError) {\n        throw new Error(\n          `failed to find elements (status ${response.status}): ${\n            responseText || response.statusText\n          }`\n        );\n      }\n    }\n\n    const result = await response.json();\n    // console.log(result);\n    return result.data;\n  }\n\n  /**\n   * Click the first element matching the selector\n   *\n   * @returns Detailed information about the click operation\n   */\n  async click(): Promise<ClickResult> {\n    const response = await fetch(\n      `${this.baseUrl}/experimental/operator/click`,\n      {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          selector: {\n            ...this.selector,\n            activate_app: this.selector.activate_app !== false,\n          },\n        }),\n      }\n    );\n\n    if (!response.ok) {\n      const responseText = await response.text();\n      console.log(\"error response:\", responseText);\n\n      try {\n        const errorData = JSON.parse(responseText);\n        throw new Error(\n          `failed to click element: ${errorData.error || response.statusText}`\n        );\n      } catch (parseError) {\n        throw new Error(\n          `failed to click element (status ${response.status}): ${\n            responseText || response.statusText\n          }`\n        );\n      }\n    }\n\n    const data = await response.json();\n    console.log(\"debug: click response data:\", JSON.stringify(data, null, 2));\n\n    if (!data.success) {\n      throw new Error(\n        `click operation failed: ${data.error || \"unknown error\"}`\n      );\n    }\n\n    // Handle different possible response structures\n    if (data.result) {\n      // If data.result contains the expected structure\n      return data.result as ClickResult;\n    } else if (data.method) {\n      // If the ClickResult fields are directly on the data object\n      return {\n        method: data.method,\n        coordinates: data.coordinates,\n        details: data.details || \"Click operation succeeded\",\n      } as ClickResult;\n    } else {\n      // Fallback with minimal information\n      console.log(\n        \"warning: click response missing expected structure, creating fallback object\"\n      );\n      return {\n        method: \"MouseSimulation\",\n        coordinates: undefined,\n        details:\n          \"Click operation succeeded but returned unexpected data structure\",\n      };\n    }\n  }\n\n  /**\n   * Fill the first element matching the selector with text\n   */\n  async fill(text: string): Promise<boolean> {\n    const response = await fetch(`${this.baseUrl}/experimental/operator/type`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        selector: {\n          ...this.selector,\n          activate_app: this.selector.activate_app !== false,\n        },\n        text,\n      }),\n    });\n\n    if (!response.ok) {\n      const responseText = await response.text();\n      console.log(\"error response:\", responseText);\n\n      try {\n        const errorData = JSON.parse(responseText);\n        throw new Error(\n          `failed to type text: ${errorData.error || response.statusText}`\n        );\n      } catch (parseError) {\n        throw new Error(\n          `failed to type text (status ${response.status}): ${\n            responseText || response.statusText\n          }`\n        );\n      }\n    }\n\n    const result = await response.json();\n    return result.success;\n  }\n\n  /**\n   * Check if an element matching the selector exists\n   */\n  async exists(): Promise<boolean> {\n    try {\n      const element = await this.first();\n      return !!element;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Wait for an element matching the selector to appear\n   */\n  async waitFor(\n    options: { timeout?: number } = {}\n  ): Promise<ElementInfo | null> {\n    const startTime = Date.now();\n    const timeout = options.timeout || 30000;\n\n    while (Date.now() - startTime < timeout) {\n      try {\n        const element = await this.first();\n        if (element) {\n          return element;\n        }\n      } catch (error) {\n        // Element not found, try again\n      }\n\n      // Wait before retrying\n      await new Promise((resolve) => setTimeout(resolve, 100));\n    }\n\n    return null;\n  }\n\n  /**\n   * Press a key combination on the first element matching the selector\n   *\n   * @param keyCombo The key or key combination to press (e.g., \"tab\", \"cmd+c\", \"shift+enter\")\n   * @returns Whether the operation was successful\n   */\n  async pressKey(keyCombo: string): Promise<boolean> {\n    const response = await fetch(\n      `${this.baseUrl}/experimental/operator/press-key`,\n      {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          selector: {\n            ...this.selector,\n            activate_app: this.selector.activate_app !== false,\n          },\n          key_combo: keyCombo,\n        }),\n      }\n    );\n\n    if (!response.ok) {\n      const responseText = await response.text();\n      console.log(\"error response:\", responseText);\n\n      try {\n        const errorData = JSON.parse(responseText);\n        throw new Error(\n          `failed to press key: ${errorData.error || response.statusText}`\n        );\n      } catch (parseError) {\n        throw new Error(\n          `failed to press key (status ${response.status}): ${\n            responseText || response.statusText\n          }`\n        );\n      }\n    }\n\n    const result = await response.json();\n    return result.success;\n  }\n\n  /**\n   * Scroll the first element matching the selector\n   *\n   * @param direction The direction to scroll: \"up\", \"down\", \"left\", or \"right\"\n   * @param amount The amount to scroll in pixels\n   * @returns Whether the scroll operation was successful\n   */\n  async scroll(\n    direction: \"up\" | \"down\" | \"left\" | \"right\",\n    amount: number\n  ): Promise<boolean> {\n    const response = await fetch(\n      `${this.baseUrl}/experimental/operator/scroll`,\n      {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          selector: {\n            ...this.selector,\n            activate_app: this.selector.activate_app !== false,\n          },\n          direction,\n          amount,\n        }),\n      }\n    );\n\n    if (!response.ok) {\n      const responseText = await response.text();\n      console.log(\"error response:\", responseText);\n\n      try {\n        const errorData = JSON.parse(responseText);\n        throw new Error(\n          `failed to scroll element: ${errorData.error || response.statusText}`\n        );\n      } catch (parseError) {\n        throw new Error(\n          `failed to scroll element (status ${response.status}): ${\n            responseText || response.statusText\n          }`\n        );\n      }\n    }\n\n    const result = await response.json();\n    return result.success;\n  }\n}\n","import type {\n  ScreenpipeQueryParams,\n  ScreenpipeResponse,\n  NotificationOptions,\n} from \"../../common/types\";\nimport { toSnakeCase, convertObjectToCamelCase } from \"../../common/utils\";\nimport { SettingsManager } from \"./SettingsManager\";\nimport { InboxManager } from \"./InboxManager\";\nimport { PipesManager } from \"../../common/PipesManager\";\nimport {\n  captureEvent,\n  captureMainFeatureEvent,\n  setAnalyticsClient,\n} from \"../../common/analytics\";\nimport posthog from \"posthog-js\";\nimport { Operator } from \"../../common/Operator\";\n\nsetAnalyticsClient({\n  init: posthog.init.bind(posthog),\n  identify: posthog.identify.bind(posthog),\n  capture: posthog.capture.bind(posthog),\n});\nclass NodePipe {\n  private analyticsInitialized = false;\n  private analyticsEnabled = true;\n\n  public settings = new SettingsManager();\n  public inbox = new InboxManager();\n  public pipes = new PipesManager();\n  public operator = new Operator();\n  public async sendDesktopNotification(\n    options: NotificationOptions\n  ): Promise<boolean> {\n    await this.initAnalyticsIfNeeded();\n    const notificationApiUrl = \"http://localhost:11435\";\n    try {\n      await fetch(`${notificationApiUrl}/notify`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(options),\n      });\n      await captureEvent(\"notification_sent\", {\n        success: true,\n      });\n      return true;\n    } catch (error) {\n      console.error(\"failed to send notification:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Query Screenpipe for content based on various filters.\n   *\n   * @param params - Query parameters for filtering Screenpipe content\n   * @returns Promise resolving to the Screenpipe response or null\n   *\n   * @example\n   * // Basic search for recent browser activity on a specific website\n   * const githubActivity = await pipe.queryScreenpipe({\n   *   browserUrl: \"github.com\",\n   *   contentType: \"ocr\",\n   *   limit: 20,\n   *   includeFrames: true\n   * });\n   *\n   * @example\n   * // Search for specific text on a particular website with date filters\n   * const searchResults = await pipe.queryScreenpipe({\n   *   q: \"authentication\",\n   *   browserUrl: \"auth0.com\",\n   *   appName: \"Chrome\",\n   *   contentType: \"ocr\",\n   *   startTime: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),\n   *   endTime: new Date().toISOString(),\n   *   limit: 50\n   * });\n   *\n   * @example\n   * // Track history of visits to a specific web application\n   * type VisitSession = {\n   *   timestamp: string;\n   *   title: string;\n   *   textContent: string;\n   *   imageData?: string;\n   * };\n   *\n   * async function getAppUsageHistory(domain: string): Promise<VisitSession[]> {\n   *   try {\n   *     const results = await pipe.queryScreenpipe({\n   *       browserUrl: domain,\n   *       contentType: \"ocr\",\n   *       includeFrames: true,\n   *       limit: 100,\n   *       startTime: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString() // last 30 days\n   *     });\n   *\n   *     return results.data\n   *       .filter(item => item.type === \"OCR\")\n   *       .map(item => {\n   *         const ocrItem = item.content as OCRContent;\n   *         return {\n   *           timestamp: ocrItem.timestamp,\n   *           title: ocrItem.windowName || '',\n   *           textContent: ocrItem.text,\n   *           imageData: ocrItem.frame\n   *         };\n   *       });\n   *   } catch (error) {\n   *     console.error(\"Failed to retrieve app usage history:\", error);\n   *     return [];\n   *   }\n   * }\n   *\n   * @example\n   * // Combining browserUrl with speaker filters for meeting recordings in browser\n   * import { pipe, ContentType, ScreenpipeResponse } from '@screenpipe/js';\n   *\n   * interface MeetingData {\n   *   url: string;\n   *   speakerName: string;\n   *   transcript: string;\n   *   timestamp: string;\n   * }\n   *\n   * async function getMeetingTranscripts(\n   *   meetingUrl: string,\n   *   speakerIds: number[]\n   * ): Promise<MeetingData[]> {\n   *   try {\n   *     const results = await pipe.queryScreenpipe({\n   *       browserUrl: meetingUrl,\n   *       contentType: \"audio\" as ContentType,\n   *       speakerIds: speakerIds,\n   *       limit: 200\n   *     });\n   *\n   *     return results.data\n   *       .filter(item => item.type === \"Audio\")\n   *       .map(item => {\n   *         const audioItem = item.content;\n   *         return {\n   *           url: meetingUrl,\n   *           speakerName: audioItem.speaker?.name || 'Unknown',\n   *           transcript: audioItem.transcription,\n   *           timestamp: audioItem.timestamp\n   *         };\n   *       });\n   *   } catch (error) {\n   *     console.error(`Error fetching meeting transcripts for ${meetingUrl}:`, error);\n   *     return [];\n   *   }\n   * }\n   */\n  public async queryScreenpipe(\n    params: ScreenpipeQueryParams\n  ): Promise<ScreenpipeResponse | null> {\n    await this.initAnalyticsIfNeeded();\n    const queryParams = new URLSearchParams();\n    Object.entries(params).forEach(([key, value]) => {\n      if (value !== undefined && value !== \"\") {\n        if (key === \"speakerIds\" && Array.isArray(value)) {\n          if (value.length > 0) {\n            queryParams.append(toSnakeCase(key), value.join(\",\"));\n          }\n        } else {\n          const snakeKey = toSnakeCase(key);\n          queryParams.append(snakeKey, value!.toString());\n        }\n      }\n    });\n\n    const url = `http://localhost:3030/search?${queryParams}`;\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        const errorText = await response.text();\n        let errorJson;\n        try {\n          errorJson = JSON.parse(errorText);\n          console.error(\"screenpipe api error:\", {\n            status: response.status,\n            error: errorJson,\n          });\n        } catch {\n          console.error(\"screenpipe api error:\", {\n            status: response.status,\n            error: errorText,\n          });\n        }\n        throw new Error(`http error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      await captureEvent(\"search_performed\", {\n        content_type: params.contentType,\n        result_count: data.pagination.total,\n      });\n      return convertObjectToCamelCase(data) as ScreenpipeResponse;\n    } catch (error) {\n      console.error(\"error querying screenpipe:\", error);\n      throw error;\n    }\n  }\n\n  private async initAnalyticsIfNeeded() {\n    if (this.analyticsInitialized) return;\n\n    const settings = await this.settings.getAll();\n    this.analyticsEnabled = settings.analyticsEnabled;\n    if (settings.analyticsEnabled) {\n      this.analyticsInitialized = true;\n    }\n  }\n\n  public async captureEvent(\n    eventName: string,\n    properties?: Record<string, any>\n  ) {\n    if (!this.analyticsEnabled) return;\n    await this.initAnalyticsIfNeeded();\n    const settings = await this.settings.getAll();\n    return captureEvent(eventName, {\n      distinct_id: settings.user.id,\n      email: settings.user.email,\n      ...properties,\n    });\n  }\n\n  public async captureMainFeatureEvent(\n    featureName: string,\n    properties?: Record<string, any>\n  ) {\n    if (!this.analyticsEnabled) return;\n    await this.initAnalyticsIfNeeded();\n    return captureMainFeatureEvent(featureName, properties);\n  }\n}\n\nconst pipe = new NodePipe();\n\nexport * from \"../../common/types\";\nexport { getDefaultSettings } from \"../../common/utils\";\n\nexport { pipe };\n"]}